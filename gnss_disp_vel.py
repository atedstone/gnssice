"""
SUMMARY
Process TRACK-corrected GNSS data into displacement and velocity time series:
- Filter bad data
- Median filtering to remove outliers
- Gaussian filtering to smooth series
- Differencing to derive velocities
- Export to disk

DATA INPUTS
Mandatory:
- parquet file (generated by conc_daily_geod.py)
- origin_<site>.csv (generated by calculate_local_origin.py)

Generated if not available:
- rotation_<site>.dat

Optional:
- exclusions_<site>.csv
- pole_corrections_<site>.csv


OUTPUTS 
- h5 file
- csv file with v_24h.

HISTORY
Based on plot_site_rel_2009_2012_geod.m, developed by Matt King, Andrew Sole,
Ian Bartholomew, Andrew Tedstone during 2009-2012.
Created 2022-07-27 AJT.

"""

import pandas as pd
import os
import numpy as np
import matplotlib.pyplot as plt
import argparse

import gpspp

p = argparse.ArgumentParser(help='Kinematic GPS: filter positions, calculate trajectories, calculate velocities.')
p.add_argument('site', type=str, help='Name/identifier of site')
p.add_argument('geod_file', type=str, help='Path to GEOD parquet file (output by conc_daily_geod.py)')

p.add_argument('-optspath', type=str, default='', help='Location of options files if not current directory')
p.add_argument('-noexcl', action='store_true')
p.add_argument('-nocorr', action='store_true')
p.add_argument('-noplot', action='store_true')
p.add_argument('-tz', type=str, help='Localise v_24h to timezone.')
p.add_argument('-sample_freq', type=str, default='10s')

args = p.parse_args()

output_to_pre = args.geod_file.split('.parquet')[0]
output_to =  '%s.h5' %output_to_pre
output_v24h_csv = '%s_v24h.csv' %output_to_pre

# Load data and apply timestamp
geod = pd.read_parquet(args.geod_file)
geod.index = gpspp.create_time_index(geod)
geod = geod.drop(labels=['YY', 'DOY', 'Seconds', 'Fract_DOY'], axis='columns')

# Apply user pole corrections
corrections_file = os.path.join(args.optspath, 'pole_corrections_%s.csv' %site)
if not args.nocorr and os.path.exists(corrections_file):
    print('Applying pole corrections')
    geod = gpspp.apply_pole_corrections()

# Apply user exclusions
exclusions_file = os.path.join(args.optspath, 'exclusions_%s.csv' %site)
if not args.noexcl and os.path.exists(exclusions_file):
    print('Applying exclusions')
    geod = gpspp.apply_exclusions(geod, exclusions_file)

# Load coordinates of GPS origin point (basically its installation location)
try:
    origin_file = os.path.join(args.optspath, 'origin_%s.csv' %site)
    origin = pd.read_csv(origin_file)
except IOError:
    raise('origin_<site>.csv file mandatory but not found.')
origin = origin.iloc[0]

# Calculate North-East-Up
neu = gpspp.calculate_local_neu(geod, 
    origin.x0, origin.y0, origin.z0, 
    origin.lat0, origin.lon0)

# Concatenate results to df
geod_neu = pd.concat((geod, neu), axis=1)

# Rotate to along-track (x) and across-track (y) displacement
rfile = os.path.join(args.optspath, 'rotation_%s.dat' %site)
if os.path.exists(rfile):
    print('Loading existing rotation matrix')
    r1 = np.loadtxt(rfile)
else:
    print('No rotation matrix file for site exists, creating using entire contents of GEOD file')
    directions = gpspp.calculate_displacement_trajectory(geod_neu)
    r1 = gpspp.create_rot_matrix(directions)
    np.savetxt(rfile, r1)

xy = gpspp.rotate_to_displacements(geod_neu['East'], geod_neu['North'], r1)
geod_neu_xy = pd.concat((geod_neu, xy), axis=1)

# Do median filtering
filtd = gpspp.remove_displacement_outliers(geod_neu_xy, sampl_freq, iterations=2)

# Restore to original frequency and interpolate
filtd_i = gpspp.regularise(filtd, sampl_freq)

# Do Gaussian filtering
filtd_disp = gpspp.smooth_displacement(filtd_i, 7200) #7200secs = ~2hours

# Sub-set data to retain only original data samples (modified by Gaussian filtering)
xyz = filtd_disp.filter(items=('x', 'y', 'z'), axis='columns')
xyz = xyz[filtd_i.interpolated == 0]

# De-trend z (ignoring the returned slope value)
# filtd_disp['z_detr'], _ = gpspp.detrend_z(filtd_disp)

# Calculate velocities
v_24h = gpspp.calculate_daily_velocities(filtd_disp['x'], tz=tz)
v_6h = gpspp.calculate_short_velocities(filtd_disp['x'], '6H')

# Save velocities to disk
v_24h.to_hdf(output_to, 'v_24h', format='table')
v_24h.to_csv(output_v24h_csv)
v_6h.to_hdf(output_to, 'v_6h', format='table')

# Save displacements to disk
xyz.to_hdf(output_to, 'xyz', format='table')

print('Finished.')
print('Main store: %s.' %output_to)
print('24-hour velocities also exported to: %s.' %output_v24h_csv)

##################################################################

if not args.noplot:
    plt.figure()
    plt.plot(geod_neu_xy.x, geod_neu_xy.y, '.', color='gray', alpha=0.3)
    plt.plot(filtd.x, filtd.y, '.', color='tab:blue', alpha=0.3)
    plt.plot(xyz.x, xyz.y, '.', color='tab:purple', alpha=0.3)
    plt.title('X - Y')
    plt.savefig('%s_xy.png' %geod_file, dpi=300)

    plt.figure()
    plt.plot(geod_neu_xy.index, geod_neu_xy.x, '.', color='gray', alpha=0.3)
    plt.plot(filtd.index, filtd.x, '.', color='tab:blue', alpha=0.3)
    plt.plot(xyz.index, xyz.x, '.', color='tab:purple', alpha=0.3)
    plt.title('X - Time')
    plt.savefig('%s_xt.png' %geod_file, dpi=300)

    plt.figure()
    plt.plot(geod_neu_xy.y, geod_neu_xy.index, '.', color='gray', alpha=0.3)
    plt.plot(filtd.y, filtd.index, '.', color='tab:blue', alpha=0.3)
    plt.plot(xyz.y, xyz.index, '.', color='tab:purple', alpha=0.3)
    plt.title('Time - Y')
    plt.savefig('%s_ty.png' %geod_file, dpi=300)

    plt.figure()
    plt.plot(geod_neu_xy.index, geod_neu_xy.z, '.', color='gray', alpha=0.3)
    plt.plot(filtd.index, filtd.z, '.', color='tab:blue', alpha=0.3)
    plt.plot(xyz.index, xyz.z, '.', color='tab:purple', alpha=0.3)
    plt.title('Time - Z')
    plt.savefig('%s_tz.png' %geod_file, dpi=300)

    plt.figure()
    v_24h.plot(drawstyle='steps-post')
    plt.title('24H velocity')
    plt.savefig('%s_v24h.png' %geod_file, dpi=300)

    plt.figure()
    v_6h.plot()
    plt.title('Instantaneous 6H velocity')
    plt.savefig('%s_v6h.png' %geod_file, dpi=300)
