#!/usr/bin/env python
"""
SUMMARY
Process TRACK-corrected GNSS data into displacement and velocity time series:
- Filter bad data
- Median filtering to remove outliers
- Gaussian filtering to smooth series
- Differencing to derive velocities
- Export to disk


DATA INPUTS
Mandatory:
- parquet file (generated by conc_daily_geod.py)
- origin_<site>.csv (generated by calculate_local_origin.py)

Generated if not available:
- rotation_<site>.dat

Optional:
- exclusions_<site>.csv
- pole_corrections_<site>.csv


OUTPUTS 
- h5 file
- csv file with v_24h.

HISTORY
Based on plot_site_rel_2009_2012_geod.m, developed by Matt King, Andrew Sole,
Ian Bartholomew, Andrew Tedstone during 2009-2012.
Created 2022-07-27 AJT.

"""

import pandas as pd
import os
import numpy as np
import matplotlib.pyplot as plt
import argparse

import gpspp

p = argparse.ArgumentParser('Kinematic GPS: filter positions, calculate trajectories, calculate velocities.')
p.add_argument('site', type=str, help='Name/identifier of site')
p.add_argument('geod_file', type=str, help='Path to GEOD parquet file (output by conc_daily_geod.py)')

p.add_argument('-optspath', type=str, default='', help='Location of options files if not current directory')
p.add_argument('-noexcl', action='store_true')
p.add_argument('-nocorr', action='store_true')
p.add_argument('-noplot', action='store_true')
p.add_argument('-tz', type=str, help='Localise v_24h to timezone.')
p.add_argument('-sample_freq', type=str, default='10s')

args = p.parse_args()

output_to_pre = args.geod_file.split('.parquet')[0]
output_to =  '%s.h5' %output_to_pre
output_v24h_csv = '%s_v24h.csv' %output_to_pre

# Load data and apply timestamp
geod = pd.read_parquet(args.geod_file)
geod.index = gpspp.create_time_index(geod)
geod = geod.drop(labels=['YY', 'DOY', 'Seconds'], axis='columns')

# Apply user pole corrections
corrections_file = os.path.join(args.optspath, 'pole_corrections_%s.csv' %args.site)
if not args.nocorr and os.path.exists(corrections_file):
    print('Applying pole corrections')
    geod = gpspp.apply_pole_corrections()

# Apply user exclusions
exclusions_file = os.path.join(args.optspath, 'exclusions_%s.csv' %args.site)
if not args.noexcl and os.path.exists(exclusions_file):
    print('Applying exclusions')
    geod = gpspp.apply_exclusions(geod, exclusions_file)

# Load coordinates of GPS origin point (basically its installation location)
try:
    origin_file = os.path.join(args.optspath, 'origin_%s.csv' %args.site)
    origin = pd.read_csv(origin_file)
except IOError:
    raise IOError('origin_<site>.csv file mandatory but not found.')
origin = origin.iloc[0]

# Calculate North-East-Up
neu = gpspp.calculate_local_neu(geod, 
    origin['x0'], origin['y0'], origin['z0'], 
    origin['lat0'], origin['lon0'])

# Concatenate results to df
geod_neu = pd.concat((geod, neu), axis=1)

# Rotate to along-track (x) and across-track (y) displacement
rfile = os.path.join(args.optspath, 'rotation_%s.dat' %args.site)
if os.path.exists(rfile):
    print('Loading existing rotation matrix')
    r1 = np.loadtxt(rfile)
else:
    print('No rotation matrix file for site exists, creating using entire contents of GEOD file')
    directions = gpspp.calculate_displacement_trajectory(geod_neu)
    r1 = gpspp.create_rot_matrix(directions)
    np.savetxt(rfile, r1)

xy = gpspp.rotate_to_displacements(geod_neu['East'], geod_neu['North'], r1)
geod_neu_xy = pd.concat((geod_neu, xy), axis=1)

# Do median filtering
filtd = gpspp.remove_displacement_outliers(geod_neu_xy, args.sample_freq, iterations=2)

# Restore to original frequency and interpolate; adds a flag column named 'interpolated'
filtd_i = gpspp.regularise(filtd, args.sample_freq)

# Do Gaussian filtering - this df does not have interpolated column
filtd_disp = gpspp.smooth_displacement(filtd_i, 7200) #7200secs ~ 2hours

# Sub-set data to retain only original data samples (modified by Gaussian filtering)
xyz = filtd_disp.filter(items=('x', 'y', 'z'), axis='columns')
xyz = xyz[filtd_i.interpolated == 0]

# Calculate velocities
v_24h = gpspp.calculate_daily_velocities(filtd_disp['x'], tz=args.tz)
maxperday = pd.Timedelta('1D') / pd.Timedelta(args.sample_freq)
dayperc = 100 / maxperday * filtd_i.interpolated[filtd_i.interpolated == 0].resample('1D').count()
v_24h = pd.DataFrame({'v_24h':v_24h, 'obs_cover_percent':dayperc}, index=v_24h.index)

v_6h = gpspp.calculate_short_velocities(filtd_disp['x'], '6H')

# Save velocities to disk
if os.path.exists(output_to):
    os.remove(output_to)
    print('Old main output file found, deleted.')

v_24h.to_hdf(output_to, 'v_24h', format='table')
v_24h.to_csv(output_v24h_csv)
v_6h.to_hdf(output_to, 'v_6h', format='table')

# Save displacements to disk
xyz.to_hdf(output_to, 'xyz', format='table')

print('Finished.')
print('Main output file: %s.' %output_to)
print('24-hour velocities also exported to: %s.' %output_v24h_csv)

##################################################################

if not args.noplot:

    try:
        import seaborn as sns
        sns.set_style('whitegrid')
    except:
        pass

    plt.figure()
    plt.plot(geod_neu_xy.x, geod_neu_xy.y, '.', color='gray', alpha=0.3, label='GEOD (after exclusions)')
    plt.plot(filtd.x, filtd.y, '.', color='tab:blue', alpha=0.3, label='Filtered, Smoothed')
    plt.plot(xyz.x, xyz.y, '.', color='tab:purple', alpha=0.3, label='Final retained epochs')
    plt.xlabel('Metres')
    plt.ylabel('Metres')
    plt.title('%s X - Y' %args.site)
    plt.legend()
    plt.savefig('%s_xy.png' %output_to_pre, dpi=300)

    plt.figure()
    plt.plot(geod_neu_xy.index, geod_neu_xy.x, '.', color='gray', alpha=0.3, label='GEOD (after exclusions)')
    plt.plot(filtd_disp.index, filtd_disp.x, '.', color='tab:blue', alpha=0.1, label='Filtered, Smoothed')
    plt.plot(xyz.index, xyz.x, '.', color='tab:purple', alpha=0.3, label='Final retained epochs')
    plt.ylabel('Metres')
    plt.title('%s X - Time' %args.site)
    plt.savefig('%s_xt.png' %output_to_pre, dpi=300)

    plt.figure()
    plt.plot(geod_neu_xy.y, geod_neu_xy.index, '.', color='gray', alpha=0.3, label='GEOD (after exclusions)')
    plt.plot(filtd_disp.y, filtd_disp.index, '.', color='tab:blue', alpha=0.1, label='Filtered, Smoothed')
    plt.plot(xyz.y, xyz.index, '.', color='tab:purple', alpha=0.3, label='Final retained epochs')
    plt.xlabel('Metres')
    plt.title('%s Time - Y' %args.site) 
    plt.savefig('%s_ty.png' %output_to_pre, dpi=300)

    plt.figure()
    plt.plot(geod_neu_xy.index, geod_neu_xy.z, '.', color='gray', alpha=0.3, label='GEOD (after exclusions)')
    plt.plot(filtd_disp.index, filtd_disp.z, '.', color='tab:blue', alpha=0.1, label='Filtered, Smoothed')
    plt.plot(xyz.index, xyz.z, '.', color='tab:purple', alpha=0.3, label='Final retained epochs')
    plt.ylabel('Metres')
    plt.title(%args.site 'Time - Z' %args.site) 
    plt.savefig('%s_tz.png' %output_to_pre, dpi=300)

    plt.figure()
    ax1 = plt.subplot(211)
    v_24h.v_24h.plot(ax=ax1, alpha=0.5)
    # Use steps-pre: velocity calculation for day0 is (X_day1 - Xday0), so the step will show what happens that day.
    v_24h.v_24h.plot(drawstyle='steps-pre', ax=ax1)
    plt.title('%s 24H velocity' %args.site)
    plt.ylabel('m/yr')
    ax2 = plt.subplot(212, sharex=ax1)
    v_24h.obs_cover_percent.plot(drawstyle='steps-pre', ax=ax2)
    plt.ylabel(r'% daily obs cover')
    plt.savefig('%s_v24h.png' %output_to_pre, dpi=300)

    plt.figure()
    v_6h.plot()
    plt.title('%s Instantaneous 6H velocity' %args.site)
    plt.ylabel('m/yr')
    plt.savefig('%s_v6h.png' %output_to_pre, dpi=300)

    plt.show()
