# ---
# jupyter:
#   jupytext:
#     formats: ipynb,py:percent
#     text_representation:
#       extension: .py
#       format_name: percent
#       format_version: '1.3'
#       jupytext_version: 1.16.4
#   kernelspec:
#     display_name: Python 3 (ipykernel)
#     language: python
#     name: python3
# ---

# %%

# %%
"""
SUMMARY
Combine multiple parquet files to produce Level-1 dataset.

Run this script in the same directory as your data inputs. 
They are all expected to be in the same directory.
 

INPUTS
Mandatory:
- parquet file(s) (generated by conc_daily_geod.py)

OUTPUTS 
- Parquet file

To-do: convert to CLICK interface?

"""

# %%
import pandas as pd
import os
import numpy as np
import matplotlib.pyplot as plt
import argparse
from scipy.stats import mode
from copy import deepcopy
from glob import glob

# %%
from gnssice import pp

# %% [markdown]
# ## Input parameters

# %%

# If running as a Notebook, provide your arguments to the ArgumentParser here.
# input_args = ['camp', '-stake', '-f', 
#               'camp_2021_126_2023_126_geod.parquet',
#               'camp_klsq_2024_118_118_GEOD.parquet']
# site = 'camp'
# input_args = [site, '-stake', '-f', 
#               'geod_bales/*.parquet']


# # If running as a Notebook, provide your arguments to the ArgumentParser here.
# input_args = ['f003', '-f', 
#               'f003_rusb_2021_126_214_GEOD.parquet',
#               'f003_rusb_2022_131_131_GEOD.parquet',
#               'f003_rusb_2023_123_123_GEOD.parquet',
#               'f003_1230_geod.parquet'
#              ]
# # And also provide the path where all your data are stored. 
# # The Notebook will use this to set the working directory.
# path_to_data = '/scratch/gnss/f003/'


# # If running as a Notebook, provide your arguments to the ArgumentParser here.
# input_args = ['f004', '-stake', '-f', 
#               'f004_2021_122_2023_123_geod.parquet',
#               'f004_rusb_2024_124_124_GEOD.parquet']
# # And also provide the path where all your data are stored. 
# # The Notebook will use this to set the working directory.
# path_to_data = '/scratch/gnss/f004/'


# # If running as a Notebook, provide your arguments to the ArgumentParser here.
# input_args = ['fs05', '-f', 
#               'fs05_rusb_2021_125_145_GEOD.parquet',
#               'fs05_rusb_2021_198_265_GEOD.parquet',
#               'fs05_klsq_2021_266_366_GEOD.parquet',
#               'fs05_klsq_2022_1_60_GEOD.parquet',
#               'fs05_rusb_2022_60_128_GEOD.parquet',
#               'fs05_rusb_2024_122_122_GEOD.parquet'
#              ]
# # And also provide the path where all your data are stored. 
# # The Notebook will use this to set the working directory.
# path_to_data = '/scratch/gnss/fs05'


# # If running as a Notebook, provide your arguments to the ArgumentParser here.
# input_args = ['kanu', '-f', 
#               'kanu_2021_122_2023_119_geod.parquet',
#               'kanu_rusb_2023_126_274_GEOD.parquet',
#               'kanu_klsq_2023_278_324_GEOD.parquet',
#               'kanu_rusb_2024_121_121_GEOD.parquet'
#              ]
# # And also provide the path where all your data are stored. 
# # The Notebook will use this to set the working directory.
# path_to_data = '/scratch/gnss/kanu/'


# # If running as a Notebook, provide your arguments to the ArgumentParser here.
# input_args = ['lev5', '-f', 
#               'lev5_rusb_2021_129_242_GEOD.parquet',
#               'lev5_rusb_2022_137_138_GEOD.parquet', 
#               'lev5_rusb_2022_151_271_GEOD.parquet', 
#               'lev5_klsq_2022_271_323_GEOD.parquet',
#               'lev5_rusb_2023_128_129_GEOD.parquet']
# # And also provide the path where all your data are stored. 
# # The Notebook will use this to set the working directory.
# path_to_data = '/scratch/gnss/lev5/'


# # If running as a Notebook, provide your arguments to the ArgumentParser here.
# input_args = ['lev6', '-f', 
#               'lev6_2021_127_2023_123_geod.parquet',
#               'lev6_rusb_2023_122_273_GEOD.parquet',
#               'lev6_klsq_2023_274_364_GEOD.parquet',
#               'lev6_klsq_2024_1_121_GEOD.parquet'
#              ]
# # And also provide the path where all your data are stored. 
# # The Notebook will use this to set the working directory.
# path_to_data = '/scratch/gnss/lev6/'




# %% [markdown]
# ## Load data and organise output filenames

# %%
def load_sort(args):
    # Load data and apply timestamp
    geod_store = []
    if args.geod_file is None:
        path_to_data = os.path.join(os.environ['GNSS_WORK'], args.site, '*.parquet')
        print(f'Searching GNSS_WORK dir... ({path_to_data})')
        files = glob(path_to_data)
    elif len(args.geod_file) == 1:
        print('Using provided wildcard sequence. Found:')
        files = glob(args.geod_file[0])
    else:
        print('Using provided list of files.')
        files = args.geod_file
        
    for file in files:
        print(file)
        geod = pd.read_parquet(file.strip())
        if 'YY' in geod.columns:
            geod.index = pp.create_time_index(geod)
            geod = geod.drop(labels=['YY', 'DOY', 'Seconds'], axis='columns')
        else:
            print('The parquet file provided appears to be a multi-batch file, continuing on this basis...')
        geod_store.append(geod)
    
    geod = pd.concat(geod_store, axis=0)
    geod = geod.sort_index()
    geod = geod[~geod.index.duplicated()]

    print('GEOD head:')
    print(geod.head())
    print('\nGEOD tail:')
    print(geod.tail())
    
    plt.figure()
    plt.plot(geod.index, geod.Latitude, 'o')
    plt.show()
    
    return geod


# %%
def export(args, geod):
    # Define output filenames
    output_to_pre = '{site}_{ys}_{ds}_{ye}_{de}'.format(
        site=args.site,
        ys=geod.index[0].year,
        ds=geod.index[0].timetuple().tm_yday,
        ye=geod.index[-1].year,
        de=geod.index[-1].timetuple().tm_yday
    )
    
    # Save a full concatenated parquet file.
    path_output_L1 = os.path.join(os.environ['GNSS_L1DIR'], args.site)
    geod_out = os.path.join(path_output_L1, f'{output_to_pre}_geod.parquet')
    
    # Don't do this save if the proposed output file matches the user-provided file (based on filename)
    #if geod_out != args.geod_file[0]:
    
    # Make sure that directory gets created, it may not exist yet
    os.makedirs(path_output_L1, exist_ok=True)
        
    if os.path.exists(geod_out):
        os.remove(geod_out)
        print('Old concatenated parquet file %s found, replaced.' %geod_out)
        
    geod.to_parquet(geod_out)
    print(f'\nLevel-1 file output to {geod_out} .')


# %%
def cli():
    p = argparse.ArgumentParser('Export Level-1 Parquet file of GNSS GEOD data bales to Level-1 directory')
    p.add_argument('site', type=str, help='Name/identifier of site')
    
    p.add_argument('-f', dest='geod_file', type=str, nargs='+', 
        help='Path to GEOD parquet file(s) (output by conc_daily_geod.py), if provided overwrites automatic wildcard searching in GNSS_WORK dir of site')
    
    args = p.parse_args()

    geod = load_sort(args)
    export(args, geod)
